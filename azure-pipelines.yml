# Trigger a build when there is a push to the main branch or a tag starts with release-
trigger:
  branches:
    include:
    - main
  tags:
    include:
    - release-*

# Trigger a build when there is a pull request to the main branch
# Ignore PRs that are just updating the docs
pr:
  branches:
    include:
    - main
    exclude:
    - doc/*
    - README.rst

# Trigger a run on main at 00:00 (midnight) UTC every day
# Run even if there are no code changes
schedules:
  - cron: "0 0 * * *"
    displayName: "Nightly Test Runs"
    always: true
    branches:
      include:
        - main

parameters:
- name: matrix
  displayName: Pool Image and Python Version Matrix
  type: object
  default:
    mac_py310:
      imageName: 'macOS-latest'
      python.version: '3.10'
      browsers: 'chromium firefox'
      browserProjects: '--project=chromium --project=firefox'
    linux_py310:
      imageName: 'ubuntu-latest'
      python.version: '3.10'
      browsers: 'chromium webkit'
      browserProjects: '--project=chromium --project=webkit --project=mobile-chrome --project=mobile-safari'
    # windows_py310:
    #   imageName: 'windows-latest'
    #   python.version: '3.10'
    mac_py311:
      imageName: 'macOS-latest'
      python.version: '3.11'
      browsers: 'chromium firefox'
      browserProjects: '--project=chromium --project=firefox'
    linux_py311:
      imageName: 'ubuntu-latest'
      python.version: '3.11'
      browsers: 'chromium webkit'
      browserProjects: '--project=chromium --project=webkit --project=mobile-chrome --project=mobile-safari'
    # windows_py311:
    #   imageName: 'windows-latest'
    #   python.version: '3.11'
    mac_py312:
      imageName: 'macOS-latest'
      python.version: '3.12'
      browsers: 'chromium firefox'
      browserProjects: '--project=chromium --project=firefox'
    linux_py312:
      imageName: 'ubuntu-latest'
      python.version: '3.12'
      browsers: 'chromium webkit'
      browserProjects: '--project=chromium --project=webkit --project=mobile-chrome --project=mobile-safari'
    # windows_py312:
    #   imageName: 'windows-latest'
    #   python.version: '3.12'

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
  - stage: RunAllTests
    displayName: Run python test suite
    jobs:
      - job: run_tests
        strategy:
          matrix: ${{ parameters.matrix }}

        pool:
          vmImage: $(imageName)

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script: |
            echo "##vso[task.setvariable variable=PIP_CACHE_DIR]$(pip cache dir)"
          displayName: 'Set PIP_CACHE_DIR'

        - task: Cache@2
          inputs:
            key: 'pip | "$(Build.SourcesDirectory)/test-requirements.txt" | "$(Build.SourcesDirectory)/setup.cfg"'
            restoreKeys: |
              pip |
            path: $(PIP_CACHE_DIR)
          displayName: 'Cache pip dependencies'

        - script: |
            python -m pip install --upgrade pip setuptools wheel
          displayName: 'Upgrade pip'

        - script: |
            pip install -r test-requirements.txt
          displayName: 'Install pip dependencies'

        - script: |
            pip install -e .
          displayName: 'Install local package'

        # # Debugging import datashader
        # - script: |
        #     echo "Installed packages:"
        #     pip list
        #     echo "Dask information:"
        #     python -c "import dask; print('Dask version:', dask.__version__)"
        #     python -c "import dask.dataframe; print('Dask DataFrame path:', dask.dataframe.__file__)"
        #     echo "Datashader information:"
        #     python -c "import datashader; print('Datashader version:', datashader.__version__)"
        #   displayName: 'Debug dependency versions'

        - script: |
            export CI=true
            mkdir -p $(Build.ArtifactStagingDirectory)/mpl
            pytest datamapplot/tests --mpl --show-capture=no --disable-warnings \
                --cov=datamapplot/ --cov-report=html \
                --mpl-generate-summary=html \
                --mpl-results-path=$(Build.ArtifactStagingDirectory)/mpl
          displayName: 'Run python tests'

        - script: |
            echo "Listing contents of $(Build.ArtifactStagingDirectory)/mpl:"
            ls -la $(Build.ArtifactStagingDirectory)/mpl
          displayName: 'List contents of $(Build.ArtifactStagingDirectory)/mpl'
          condition: ne(variables['Agent.OS'], 'Windows_NT')

        # - bash: |
        #     coveralls
        #   displayName: 'Publish to coveralls'
        #   condition: and(succeeded(), eq(variables.triggeredByPullRequest, false)) # Don't run this for PRs because they can't access pipeline secrets
        #   env:
        #     COVERALLS_REPO_TOKEN: $(COVERALLS_TOKEN)

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)/mpl
            artifactName: 'mpl-test-results-$(Build.BuildId)-$(Agent.OS)-py$(python.version)'
          displayName: 'Publish MPL Test Artifacts'
          condition: always()

        - script: |
            echo "Listing contents of html dir:"
            ls -la $(Build.SourcesDirectory)/datamapplot/tests/html
          displayName: 'List contents of html dir'
          condition: ne(variables['Agent.OS'], 'Windows_NT')

        - script: |
            python -m http.server 8000 -d $(Build.SourcesDirectory)/datamapplot/tests/html &
          displayName: 'Start HTTP server (Unix)'
          condition: ne(variables['Agent.OS'], 'Windows_NT')

        - powershell: |
            $serverJob = Start-Process python -ArgumentList "-m", "http.server", "8000", "-d", "$env:BUILD_SOURCESDIRECTORY\datamapplot\tests\html" -PassThru -NoNewWindow
            Start-Sleep -Seconds 5
            $retry = 0
            do {
                try {
                    $response = Invoke-WebRequest -Uri "http://localhost:8000" -Method Head
                    Write-Host "Server started successfully"
                    break
                } catch {
                    Write-Host "Waiting for server to start... Attempt $retry"
                    Start-Sleep -Seconds 2
                    $retry++
                }
            } while ($retry -lt 5)

            if ($retry -eq 5) {
                Write-Error "Server failed to start after multiple attempts"
                exit 1
            }
          displayName: 'Start HTTP server (Windows)'
          condition: eq(variables['Agent.OS'], 'Windows_NT')

        - task: NodeTool@0
          inputs:
            versionSpec: '22'
          displayName: 'Use Node.js for frontend tests'

        - script: |
            npm ci
          displayName: 'Install npm dependencies'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright install --with-deps
          displayName: 'Install default Playwright browsers'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright install --with-deps $(browsers)
          displayName: 'Install extra browsers'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            if [[ "$(Build.Reason)" == "PullRequest" ]]; then
              npx playwright test $(browserProjects) --grep-invert @slow
            else
              npx playwright test $(browserProjects)
            fi
          displayName: 'Run Playwright tests'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'
          env:
            CI: 'true'

        - task: PublishTestResults@2
          displayName: 'Publish frontest test results'
          inputs:
            searchFolder: 'test-results'
            testResultsFormat: 'JUnit'
            testResultsFiles: 'e2e-junit-results.xml'
            mergeTestResults: true
            failTaskOnFailedTests: true
            testRunTitle: 'Playwright Test Results-$(Agent.OS)-py$(python.version)'
          condition: succeededOrFailed()

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.SourcesDirectory)/datamapplot/interactive_tests/playwright-report'
            artifactName: 'playwright-report-$(Build.BuildId)-$(Agent.OS)-py$(python.version)'
          displayName: 'Publish Playwright Test Report'
          condition: succeededOrFailed()

  - stage: BuildPublishArtifact
    dependsOn:
      - RunAllTests
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/release-'), eq(variables.triggeredByPullRequest, false))
    jobs:
      - job: BuildArtifacts
        displayName: Build source dists and wheels
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'
          displayName: 'Use Python 3.10'

        - script: |
            python -m pip install --upgrade pip
            pip install wheel
          displayName: 'Install dependencies'

        - script: |
            pip install -e .
          displayName: 'Install package locally'

        - script: |
            python setup.py sdist bdist_wheel
          displayName: 'Build package'

        - bash: |
            export PACKAGE_VERSION="$(python setup.py --version)"
            echo "Package Version: ${PACKAGE_VERSION}"
            echo "##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}"
          displayName: 'Get package version'

        - script: |
            echo "Version in git tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)"
            exit 1
          displayName: Raise error if version doesnt match tag
          condition: and(succeeded(), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

        - task: DownloadSecureFile@1
          name: PYPIRC_CONFIG
          displayName: 'Download pypirc'
          inputs:
            secureFile: 'pypirc'

        - script: |
            pip install twine
            twine upload --repository pypi --config-file $(PYPIRC_CONFIG.secureFilePath) dist/*
          displayName: 'Upload to PyPI'
          condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

